type Query {
	# hello(name: String): String!
	# GraphQL expects a "resolver" to provide data for this query
	# hello: String
	# hello(firstName: String): String
	hello(firstName: String): String
	students: [Student]
	studentsWithFilter(filter: StudentOptional!): [Student]!
	studentsWithFields(
		id: Int
		firstName: String
		lastName: String
		dateOfBirth: String
		email: String
		phoneNumber: String
		city: String
		province: String
		country: String
		postalCode: String
	): [Student]!
	studentById(id: Int!): Student
	courses: [Course]
	classes: [Class]
	departments: [Department]
	instructors: [Instructor]
	registrations: [Registration]
	rooms: [Room]
}

type Mutation {
	# This is the best option, because it returns the fully created Student object
	addStudent(student: StudentInput!): Student!
	#
	# Just return the new ID value
	# addStudent(student: StudentInput!): Int
	#
	# addStudent(student: StudentInput!): Boolean

	# Thinking of a SQL UPDATE statement: UPDATE {StudentInput} WHERE id = id;
	updateStudent(id: Int!, student: StudentOptional!): Student
	deleteStudent(id: Int!): Boolean
}

type Class {
	id: Int!
	courseId: Int!
	semester: String!
	instructorId: Int
	seats: Int
	roomId: Int
	course: Course
}

type Course {
	id: Int!
	courseTitle: String!
	courseDescription: String
	credits: Int
	duration: Int
	departmentId: Int
	department: Department
}

type Department {
	id: Int!
	departmentName: String!
}

type Instructor {
	id: Int!
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}

type Registration {
	id: Int!
	classId: Int!
	studentId: Int!
	registrationDate: String
	registrationStatus: String
}

type Room {
	id: Int!
	roomCapacity: Int
	building: String
}

type Student {
	id: Int!
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}

input StudentOptional {
	firstName: String
	lastName: String
	dateOfBirth: String
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}

input StudentInput {
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}
